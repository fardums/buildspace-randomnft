{"ast":null,"code":"var _jsxFileName = \"/Users/Faradila/Development/buildspace-randomnft/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport randomNft from \"./utils/randomNFT.json\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"ballerz_ballsie\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/collection/randomft-v2\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x862A198b790307a5AA1179a604ed36022BD2DDb7\";\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [mintCount, setmintCount] = useState(0);\n\n  const checkCorrectNetwork = async () => {\n    const {\n      ethereum\n    } = window;\n    let chainId = await ethereum.request({\n      method: \"eth_chainId\"\n    });\n    console.log(\"Connected to chain \" + chainId);\n\n    if (chainId !== \"0x4\") {\n      alert(\"Need to be on the Rinkeby!\");\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Setup our listener.\n\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, randomNft.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"NewRandomNFT\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, randomNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeARandomNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTotalNFTsMintedSoFar = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      console.log(\"here\", CONTRACT_ADDRESS);\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, randomNft.abi, signer);\n        let nftAmount = await connectedContract.getTotalMints();\n        let amount = parseInt(nftAmount);\n        setmintCount(amount);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkCorrectNetwork();\n    checkIfWalletIsConnected();\n    getTotalNFTsMintedSoFar();\n  }, []);\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: [\" \", \"Minted:\\xA0\", mintCount, \" / \", TOTAL_MINT_COUNT]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: OPENSEA_LINK,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: \"ðŸŒŠ View Collection on OpenSea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            height: \"40px\",\n            width: \"120px\",\n            \"border-radius\": \"5px\",\n            \"box-shadow\": \"0px 1px 6px rgba(0, 0, 0, 0.25)\",\n            src: \"https://storage.googleapis.com/opensea-static/Logomark/Badge%20-%20Available%20On%20-%20Light.png\",\n            alt: \"Available on OpenSea\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"miP5ukxTIQ4M3Oaa1j/s5tu/uYM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Faradila/Development/buildspace-randomnft/src/App.js"],"names":["React","useEffect","useState","ethers","randomNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","mintCount","setmintCount","checkCorrectNetwork","ethereum","window","chainId","request","method","console","log","alert","checkIfWalletIsConnected","accounts","length","account","setupEventListener","connectWallet","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","makeARandomNFT","wait","hash","getTotalNFTsMintedSoFar","nftAmount","getTotalMints","amount","parseInt","renderNotConnectedContainer","renderMintUI","twitterLogo"],"mappings":"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","sourcesContent":["import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport randomNft from \"./utils/randomNFT.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"ballerz_ballsie\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/collection/randomft-v2\";\nconst TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0x862A198b790307a5AA1179a604ed36022BD2DDb7\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [mintCount, setmintCount] = useState(0);\n\n  const checkCorrectNetwork = async () => {\n    const { ethereum } = window;\n    let chainId = await ethereum.request({ method: \"eth_chainId\" });\n    console.log(\"Connected to chain \" + chainId);\n    if (chainId !== \"0x4\") {\n      alert(\"Need to be on the Rinkeby!\");\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          randomNft.abi,\n          signer\n        );\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewRandomNFT\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          randomNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeARandomNFT();\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTotalNFTsMintedSoFar = async () => {\n    try {\n      const { ethereum } = window;\n      console.log(\"here\", CONTRACT_ADDRESS);\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          randomNft.abi,\n          signer\n        );\n        let nftAmount = await connectedContract.getTotalMints();\n        let amount = parseInt(nftAmount);\n        setmintCount(amount);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkCorrectNetwork();\n    checkIfWalletIsConnected();\n    getTotalNFTsMintedSoFar();\n  }, []);\n\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMintNft}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Mint NFT\n    </button>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUI()}\n        </div>\n        <div>\n          <p className=\"header gradient-text\">\n            {\" \"}\n            Minted:&nbsp;{mintCount} / {TOTAL_MINT_COUNT}\n          </p>\n          <p className=\"sub-text\">\n            <a href={OPENSEA_LINK} target=\"_blank\" rel=\"noreferrer\">\n              {\"ðŸŒŠ View Collection on OpenSea\"}\n            </a>\n          </p>\n          <p>\n            <img\n              height=\"40px\"\n              width=\"120px\"\n              border-radius=\"5px\"\n              box-shadow=\"0px 1px 6px rgba(0, 0, 0, 0.25)\"\n              src=\"https://storage.googleapis.com/opensea-static/Logomark/Badge%20-%20Available%20On%20-%20Light.png\"\n              alt=\"Available on OpenSea\"\n            />\n          </p>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}